parameters:
  - name: serviceConnection
    type: string
  - name: environment
    type: string
  - name: adGroupEnvironment
    type: string
  - name: orcaCatalog
    type: string
  - name: orcaMetadataSchema
    type: string
  - name: orcaRuntimeSchema
    type: string
  - name: bronzeCatalog
    type: string
  - name: silverCatalog
    type: string
  - name: goldCatalog
    type: string
  - name: platinumCatalog
    type: string
  - name: enableCdfForRuntime
    type: boolean
    default: true
  - name: enableCdfForMetadata
    type: boolean
    default: false
  - name: storageAccountName
    type: string
    default: ''
  - name: storageConnectorId
    type: string
    default: ''
  - name: databricksHost
    type: string
    default: ''
  


steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.11'
    inputs:
      versionSpec: '3.11'
      addToPath: true


  # Install Terraform manually since TerraformInstaller task is not available
  - script: |
      # Download and install Terraform
      TERRAFORM_VERSION=${TERRAFORM_VERSION:-1.5.7}
      echo "Installing Terraform version: $TERRAFORM_VERSION"
      
      # Download Terraform
      wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      
      # Install unzip if not available
      sudo apt-get update && sudo apt-get install -y unzip
      
      # Unzip and install
      unzip -q terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      sudo mv terraform /usr/local/bin/
      
      # Verify installation
      terraform version
    env:
      TERRAFORM_VERSION: $(terraformVersion)

  - task: AzureCLI@2
    displayName: 'Setup Databricks Authentication'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Get Azure credentials
        export ARM_CLIENT_ID=$(az ad sp show --id $servicePrincipalId --query appId -o tsv)
        export ARM_TENANT_ID=$(az account show --query tenantId -o tsv)
        export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        
        # Set Databricks environment variables
        echo "##vso[task.setvariable variable=DATABRICKS_HOST]${{ parameters.databricksHost }}"
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$ARM_CLIENT_ID"
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]$ARM_TENANT_ID"
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$ARM_SUBSCRIPTION_ID"
        echo "##vso[task.setvariable variable=ARM_USE_MSI]true"
        
        # Log configuration (without sensitive data)
        echo "Environment: ${{ parameters.environment }}"
        echo "Catalog: ${{ parameters.orcaCatalog }}"
        echo "Metadata Schema: ${{ parameters.orcaMetadataSchema }}"
        echo "Runtime Schema: ${{ parameters.orcaRuntimeSchema }}"

        echo "Backend Storage: $(terraform_storage_account)"
        echo "Backend Container: $(terraform_container)"
        echo "Backend RG: $(terraform_resource_group)"
        
        # Export ARM credentials for Terraform backend
        export ARM_USE_MSI=true
        export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
        export ARM_TENANT_ID=$ARM_TENANT_ID
        export ARM_CLIENT_ID=$ARM_CLIENT_ID
        
        # Initialize Terraform with Azure backend
        echo "Initializing Terraform with Azure backend..."
        terraform init \
          -backend-config="resource_group_name=$(terraform_resource_group)" \
          -backend-config="storage_account_name=$(terraform_storage_account)" \
          -backend-config="container_name=$(terraform_container)" \
          -backend-config="key=orca-ddl/${{ parameters.environment }}/terraform.tfstate" \
          -backend-config="use_msi=true" \
          -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
          -backend-config="tenant_id=$ARM_TENANT_ID" \
          -backend-config="client_id=$ARM_CLIENT_ID"

        workingDirectory: $(System.DefaultWorkingDirectory)

  - task: AzureCLI@2
    displayName: 'Terraform Validate'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Export ARM credentials for Terraform
        export ARM_USE_MSI=true
        export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
        export ARM_TENANT_ID=$(ARM_TENANT_ID)
        export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
        export DATABRICKS_HOST=${{ parameters.databricksHost }}
        
        # Validate Terraform configuration
        terraform validate
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: AzureCLI@2
    displayName: 'Terraform Plan'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Export ARM credentials for Terraform
        export ARM_USE_MSI=true
        export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
        export ARM_TENANT_ID=$(ARM_TENANT_ID)
        export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
        export DATABRICKS_HOST=${{ parameters.databricksHost }}
        
        # Plan Terraform changes
        terraform plan \
        -var="orca_catalog=${{ parameters.orcaCatalog }}" \
        -var="orca_metadata_schema=${{ parameters.orcaMetadataSchema }}" \
        -var="orca_runtime_schema=${{ parameters.orcaRuntimeSchema }}" \
        -var="bronze_catalog=${{ parameters.bronzeCatalog }}" \
        -var="silver_catalog=${{ parameters.silverCatalog }}" \
        -var="gold_catalog=${{ parameters.goldCatalog }}" \
        -var="platinum_catalog=${{ parameters.platinumCatalog }}" \
        -var="environment=${{ parameters.environment }}" \
        -var="enable_cdf_for_runtime=${{ parameters.enableCdfForRuntime }}" \
        -var="enable_cdf_for_metadata=${{ parameters.enableCdfForMetadata }}" \
        -var="storage_account_name=$(parameters.storageAccountName)" \
        -var="storage_connector_id=${{ parameters.storageConnectorId }}" \
        -var="ad_group_environment=${{ parameters.adGroupEnvironment }}" \
        -out=tfplan
    workingDirectory: $(System.DefaultWorkingDirectory)


#  - script: |
#      # Apply Terraform changes
#      terraform apply -auto-approve tfplan
#    displayName: 'Terraform Apply'
#    workingDirectory: $(System.DefaultWorkingDirectory)
#    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - script: |
      # Show Terraform outputs
      terraform output -json > terraform-outputs.json
      cat terraform-outputs.json
    displayName: 'Capture Terraform Outputs'
    workingDirectory: $(System.DefaultWorkingDirectory)
    condition: succeeded()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform Plan'
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/tfplan'
      ArtifactName: 'terraform-plan-${{ parameters.environment }}'
      publishLocation: 'Container'
    condition: always()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform Outputs'
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform-outputs.json'
      ArtifactName: 'terraform-outputs-${{ parameters.environment }}'
      publishLocation: 'Container'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))