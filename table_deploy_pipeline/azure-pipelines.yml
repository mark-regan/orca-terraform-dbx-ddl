trigger:
  branches:
    include:
      - develop
      - release/*
      - main
  paths:
    include:
      - '**'
      - 'tables/**'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: dbx-common

stages:
  - stage: DeployDev
    displayName: 'Run SQL to Dev'
    condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/'))
    variables:
      - group: dbx-dev-vars
      - group: dbx-unity-dev-vars
      - group: dbx-azure-dev-vars
      - group: dbx-common
    jobs:
      - deployment: RunSQLDev
        displayName: 'Execute SQL (Dev)'
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: 'Login (Federated)'
                  inputs:
                    azureSubscription: 'cbs-data-preprod-mi-reporting-dev'
                    addSpnToEnvironment: true
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "##vso[task.setvariable variable=servicePrincipalId]$servicePrincipalId"
                      echo "##vso[task.setvariable variable=idToken]$idToken"
                      echo "##vso[task.setvariable variable=tenantId]$tenantId"

                - task: Bash@3
                  displayName: 'Azure CLI Login (OIDC)'
                  inputs:
                    targetType: inline
                    script: >-
                      az login --service-principal --username='$(servicePrincipalId)' --tenant='$(tenantId)'
                      --federated-token='$(idToken)' --allow-no-subscriptions

                - task: Bash@3
                  displayName: 'Execute SQL Files (Dev)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      sudo apt-get update -y && sudo apt-get install -y jq
                      python3 -m pip install --user azure-identity
                      : "${DATABRICKS_HOST:=$(databricks_host)}"
                      if [ -z "$DATABRICKS_HOST" ]; then echo "Databricks host (databricks_host) not set" >&2; exit 1; fi
                      python3 run_sql_deploy.py \
                        --env dev \
                        --host "$DATABRICKS_HOST" \
                        --root sql \
                        --out "$(Build.ArtifactStagingDirectory)/sql-results/dev" \
                        --warehouse-id "$(databricks_sql_warehouse_id)" 

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish SQL Results (Dev)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/sql-results/dev'
                    ArtifactName: 'sql-results-dev'
                    publishLocation: 'Container'
                  condition: always()

                - task: Bash@3
                  displayName: 'Assemble deployment.json (Dev)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      python3 assemble_report.py \
                        --env dev \
                        --in  '$(Build.ArtifactStagingDirectory)/sql-results/dev' \
                        --out '$(Build.ArtifactStagingDirectory)/deployment/dev'

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish Deployment Report (Dev)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deployment/dev'
                    ArtifactName: 'deployment-report-dev'
                    publishLocation: 'Container'
                  condition: always()

  - stage: DeployTest
    displayName: 'Run SQL to Test'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    variables:
      - group: dbx-test-vars
      - group: dbx-unity-test-vars
      - group: dbx-azure-test-vars
      - group: dbx-common
    jobs:
      - deployment: RunSQLTest
        displayName: 'Execute SQL (Test)'
        environment: test
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: 'Login (Federated)'
                  inputs:
                    azureSubscription: 'cbs-data-preprod-mi-reporting-dev'
                    addSpnToEnvironment: true
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "##vso[task.setvariable variable=servicePrincipalId]$servicePrincipalId"
                      echo "##vso[task.setvariable variable=idToken]$idToken"
                      echo "##vso[task.setvariable variable=tenantId]$tenantId"

                - task: Bash@3
                  displayName: 'Azure CLI Login (OIDC)'
                  inputs:
                    targetType: inline
                    script: >-
                      az login --service-principal --username='$(servicePrincipalId)' --tenant='$(tenantId)'
                      --federated-token='$(idToken)' --allow-no-subscriptions

                - task: Bash@3
                  displayName: 'Execute SQL Files (Test)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      sudo apt-get update -y && sudo apt-get install -y jq
                      python3 -m pip install --user azure-identity
                      : "${DATABRICKS_HOST:=$(databricks_host)}"
                      python3 run_sql_deploy.py \
                        --env test \
                        --host "$DATABRICKS_HOST" \
                        --root sql \
                        --out "$(Build.ArtifactStagingDirectory)/sql-results/test" \
                        --warehouse-id "$(databricks_sql_warehouse_id)" 

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish SQL Results (Test)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/sql-results/test'
                    ArtifactName: 'sql-results-test'
                    publishLocation: 'Container'
                  condition: always()

                - task: Bash@3
                  displayName: 'Assemble deployment.json (Test)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      python3 assemble_report.py \
                        --env test \
                        --in  '$(Build.ArtifactStagingDirectory)/sql-results/test' \
                        --out '$(Build.ArtifactStagingDirectory)/deployment/test'

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish Deployment Report (Test)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deployment/test'
                    ArtifactName: 'deployment-report-test'
                    publishLocation: 'Container'
                  condition: always()

  - stage: DeployUAT
    displayName: 'Run SQL to UAT'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    variables:
      - group: dbx-uat-vars
      - group: dbx-unity-uat-vars
      - group: dbx-azure-uat-vars
      - group: dbx-common
    jobs:
      - deployment: RunSQLUAT
        displayName: 'Execute SQL (UAT)'
        environment: uat
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: 'Login (Federated)'
                  inputs:
                    azureSubscription: 'cbs-data-preprod-mi-reporting-dev'
                    addSpnToEnvironment: true
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "##vso[task.setvariable variable=servicePrincipalId]$servicePrincipalId"
                      echo "##vso[task.setvariable variable=idToken]$idToken"
                      echo "##vso[task.setvariable variable=tenantId]$tenantId"

                - task: Bash@3
                  displayName: 'Azure CLI Login (OIDC)'
                  inputs:
                    targetType: inline
                    script: >-
                      az login --service-principal --username='$(servicePrincipalId)' --tenant='$(tenantId)'
                      --federated-token='$(idToken)' --allow-no-subscriptions

                - task: Bash@3
                  displayName: 'Execute SQL Files (UAT)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      sudo apt-get update -y && sudo apt-get install -y jq
                      python3 -m pip install --user azure-identity
                      : "${DATABRICKS_HOST:=$(databricks_host)}"
                      python3 run_sql_deploy.py \
                        --env uat \
                        --host "$DATABRICKS_HOST" \
                        --root sql \
                        --out "$(Build.ArtifactStagingDirectory)/sql-results/uat" \
                        --warehouse-id "$(databricks_sql_warehouse_id)" 

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish SQL Results (UAT)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/sql-results/uat'
                    ArtifactName: 'sql-results-uat'
                    publishLocation: 'Container'
                  condition: always()

                - task: Bash@3
                  displayName: 'Assemble deployment.json (UAT)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      python3 assemble_report.py \
                        --env uat \
                        --in  '$(Build.ArtifactStagingDirectory)/sql-results/uat' \
                        --out '$(Build.ArtifactStagingDirectory)/deployment/uat'

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish Deployment Report (UAT)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deployment/uat'
                    ArtifactName: 'deployment-report-uat'
                    publishLocation: 'Container'
                  condition: always()

  - stage: DeployProd
    displayName: 'Run SQL to Prod'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    variables:
      - group: dbx-prod-vars
      - group: dbx-unity-prod-vars
      - group: dbx-azure-prod-vars
      - group: dbx-common
    jobs:
      - deployment: RunSQLProd
        displayName: 'Execute SQL (Prod)'
        environment: prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: 'Login (Federated)'
                  inputs:
                    azureSubscription: 'cbs-data-preprod-mi-reporting-dev'
                    addSpnToEnvironment: true
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      echo "##vso[task.setvariable variable=servicePrincipalId]$servicePrincipalId"
                      echo "##vso[task.setvariable variable=idToken]$idToken"
                      echo "##vso[task.setvariable variable=tenantId]$tenantId"

                - task: Bash@3
                  displayName: 'Azure CLI Login (OIDC)'
                  inputs:
                    targetType: inline
                    script: >-
                      az login --service-principal --username='$(servicePrincipalId)' --tenant='$(tenantId)'
                      --federated-token='$(idToken)' --allow-no-subscriptions

                - task: Bash@3
                  displayName: 'Execute SQL Files (Prod)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      sudo apt-get update -y && sudo apt-get install -y jq
                      python3 -m pip install --user azure-identity
                      : "${DATABRICKS_HOST:=$(databricks_host)}"
                      python3 run_sql_deploy.py \
                        --env prod \
                        --host "$DATABRICKS_HOST" \
                        --root sql \
                        --out "$(Build.ArtifactStagingDirectory)/sql-results/prod" \
                        --warehouse-id "$(databricks_sql_warehouse_id)" 

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish SQL Results (Prod)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/sql-results/prod'
                    ArtifactName: 'sql-results-prod'
                    publishLocation: 'Container'
                  condition: always()

                - task: Bash@3
                  displayName: 'Assemble deployment.json (Prod)'
                  inputs:
                    targetType: inline
                    script: |
                      set -euo pipefail
                      python3 assemble_report.py \
                        --env prod \
                        --in  '$(Build.ArtifactStagingDirectory)/sql-results/prod' \
                        --out '$(Build.ArtifactStagingDirectory)/deployment/prod'

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish Deployment Report (Prod)'
                  inputs:
                    PathtoPublish: '$(Build.ArtifactStagingDirectory)/deployment/prod'
                    ArtifactName: 'deployment-report-prod'
                    publishLocation: 'Container'
                  condition: always()
